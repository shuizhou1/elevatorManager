import Vue from 'vue'
import http from '@/utils/httpRequest'
/**
 * 获取uuid
 */
export function getUUID () {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
    return (c === 'x' ? (Math.random() * 16 | 0) : ('r&0x3' | '0x8')).toString(16)
  })
}

/**
 * 是否有权限
 * @param {*} key
 */
export function isAuth (key) {
  return JSON.parse(sessionStorage.getItem('permissions') || '[]').indexOf(key) !== -1 || false
}

/**
 * 树形数据转换
 * @param {*} data
 * @param {*} id
 * @param {*} pid
 */
export function treeDataTranslate (data, id = 'id', pid = 'parentId') {
  var res = []
  var temp = {}
  for (var i = 0; i < data.length; i++) {
    temp[data[i][id]] = data[i]
  }
  for (var k = 0; k < data.length; k++) {
    if (temp[data[k][pid]] && data[k][id] !== data[k][pid]) {
      if (!temp[data[k][pid]]['children']) {
        temp[data[k][pid]]['children'] = []
      }
      if (!temp[data[k][pid]]['_level']) {
        temp[data[k][pid]]['_level'] = 1
      }
      data[k]['_level'] = temp[data[k][pid]]._level + 1
      temp[data[k][pid]]['children'].push(data[k])
    } else {
      res.push(data[k])
    }
  }
  return res
}

/**
 * 获取数据字典填充下拉框
 * @param {*} type  数据字典类型
 */
export function getDictEntry (type){
        http({
          url: http.adornUrl('/dictionary/dicttype/getTypeByCode'),
          method: 'get',
          params: http.adornParams({
            'entrycode': type
          })
        }).then(({data}) => {
          	sessionStorage.setItem(''+type+'',JSON.stringify(data.entryData));
        })
 }

/**
 * 根据字典类型获取数据
 * @param {*} type  数据字典类型
 */
export function getDictName (type){
	console.log(type)
	    var name = sessionStorage.getItem(type);
        if(name == null){
          http({
          url: http.adornUrl('/dictionary/dicttype/getNameByCode'),
          method: 'get',
          params: http.adornParams({
            'entrycode': type
          })
        }).then(({data}) => {
        	 name = data.entryData[0].entryname;
        	 sessionStorage.setItem(type,name);
        	 return name;
        })
        }else{
            return name;
        }
        
 }
export function isPhone (num) {
    return /^1[3|4|5|8][0-9]\d{8}$/.test(num)
}
export function formatDate (date, fmt) {
    if (/(y+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length))
    }
    let o = {
        'M+': date.getMonth() + 1,
        'd+': date.getDate(),
        'h+': date.getHours(),
        'm+': date.getMinutes(),
        's+': date.getSeconds()
    };
    for (let k in o) {
        if (new RegExp(`(${k})`).test(fmt)) {
            let str = o[k] + ''
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : padLeftZero(str))
        }
    }
    return fmt
}
// 生成范围内的随机数
function randomNum(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}

export function randomColor(min=0, max=255){
    let [r, g, b] = [randomNum(min, max), randomNum(min, max), randomNum(min, max)]
    return `rgb(${r},${g},${b})`
}

export function randomColor_16() {
    let str = '#'
    let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F']
    for (let i = 0; i < 6; i++) {
        let randNum = arr[parseInt(11 * Math.random())]
        str += randNum
    }
    return str
}

function padLeftZero (str) {
    return ('00' + str).substr(str.length)
}
