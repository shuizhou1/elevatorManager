<template>
  <div class="mod-home">
    <!-- <el-table border  :data="dataList" :show-header="false" :span-method="arraySpanMethod" height="500px">
      <el-table-column header-align="center"  height="200" width="100">
        <template slot-scope="scope">
          <el-button type="text" @click="handleClick(scope.row.id)">{{scope.row.name}}</el-button>
        </template>
      </el-table-column>
      <el-table-column header-align="center">
        <template slot-scope="scope">
          <div :style="{ 'width': '500px' }" v-if="id==scope.row.id">
            <div id="J_chartBox"  style="height:500px;width:500px"></div>
          </div>
        </template>
      </el-table-column>
       <el-table-column header-align="center" prop="name" width="100">
       
      </el-table-column>
      <el-table-column header-align="center">
       
      </el-table-column> -->
    <!-- </el-table> -->
    <div class="table_box">
      <div class="table_left">
        <!-- <div class="table_item_top" @click="handleClick('line')" >
          {{item.name}}
        </div> -->
         <div type="text" class="table_item" v-for="(item,index) in dataList" :key="index" :class="[{'border_top':index!=0},{'active':item.id==id}]"  @click="handleClick(item)">
          {{item.name}}
        </div>
      </div>
      <div class="table_right" >
        <div style="flex:1 1 auto">
            <div  v-for="(value,index) in dataList" :key="index" :id="'J_chartBox'+value.id" v-show="value.id==id"  style="height:500px;width:1000px"></div>
          </div>
      </div>

    </div>

  </div>
</template>

<script>
import echarts from "echarts";
import config from "@/utils/config";
import { randomColor } from "@/utils/index";
import { sysradData, syslineData } from "@/utils/homeData";
// const {pieData} = require('@utils/home')
export default {
  activated() {
    console.log("actie");
    //  this.getLine()
    // this.getChartPie()
    // this.getChartBar()
    // this.getChartBar()
    // console.log(rand);
    // 由于给echart添加了resize事件, 在组件激活时需要重新resize绘画一次, 否则出现空白bug
    if (this.chart) {
      console.log("58");
      this.chart.resize();
    }

    // if (this.chartRadar) {
    //   this.chartRadar.resize();
    // }
  },
  data() {
    return {
      id:'line',
      dataList: [
        {
          name: "维保统计",
          id:'rad'
        },
        {
          name: "维修统计",
          id:'line'
        }
      ],
      mainClientHeight: null,
      clientWidth: this.$store.state.common.mainClientWidth,
      charWidth: this.$store.state.common.mainClientWidth + "px",
      leftTop: true,
      leftBottom: true,
      rightTop: true,
      rightBottom: true,
      chart:null,
      chartLine: null,
      
      
      chartRadar: null,
      ceshiHeight: this.documentClientHeight - 50 - 30 - 2 - 20,
      height: "",
      option:'',
      chartLineOption: {
        // color: config.color,
        title: {
          text: "维修统计",
          // x:'center'
        },
        tooltip: {
          trigger: "axis"
        },
        grid: {
          left: "5%",
          right: "4%",
          bottom: "3%",
          top:'20%',
          containLabel: true
        },
        legend: {
          top: 30,
          data: [
            {
              name: "故障"
            },
            {
              name: "正常"
            }
          ]
        },
        xAxis: {
          type: "category",
          boundaryGap: false,
          data: []
        },
        yAxis: {
          type: "value"
        },
        series: []
      },
      date: [],
      data: [],
      chartRadarOption: {
        color: config.color,
        title: {
          text: "维保统计",
          // x: "center"
        },
        tooltip: {},
        radar: {
          // shape: 'circle',
          name: {
            textStyle: {
              color: "#fff",
              backgroundColor: "#999",
              borderRadius: 3,
              padding: [3, 5]
            }
          },
          radius: 200,
          center: ["50%", "60%"],
          indicator: []
        },
        series: [
          {
            name: "状态",
            type: "radar",
            // areaStyle: {normal: {}},
            data: [
              {
                value: []
              }
            ]
          }
        ]
      }
    };
  },
  methods: {
    handleClick(item){
      console.log('handleclick',item.id);
      if(item.id=='rad'){
        this.id = 'rad';
        this.$nextTick(()=>{
           this.chart = echarts.init(document.getElementById(`J_chartBox${this.id}`));
          this.chart.setOption(this.chartRadarOption);
        })
       
      }else if(item.id=='line'){
        this.id = 'line';
        this.$nextTick(()=>{
          this.chart = echarts.init(document.getElementById(`J_chartBox${this.id}`),'light');
        this.chart.setOption(this.chartLineOption);
        })
        
      }

    },
    arraySpanMethod({ row, column, rowIndex, columnIndex }) {
      console.log('183');
      console.log(rowIndex);
      console.log(columnIndex);
      // if(rowIndex==1&&columnIndex==1){
      //   return [1,2]
      // }
      if(rowIndex==0&&columnIndex==1){
        return [2,2]
      }
      // return [0,1]
      // if (rowIndex % 2 === 0) {
      //   if (columnIndex === 0) {
      //     return [1, 2];
      //   } else if (columnIndex === 1) {
      //     return [0, 0];
      //   }
      // }
    },
    open(type) {
      if (type === 0) {
        this.leftTop = true;
        this.chartLine = echarts.init(
          document.getElementById("J_chartLineBox")
        );
        this.chartLine.setOption(this.option);
      }
      if (type === 1) {
        this.rightTop = true;
        this.chartBar = echarts.init(document.getElementById("J_chartBarBox"));
        this.chartBar.setOption(this.chartBarOption);
      }
      if (type === 2) {
        this.leftBottom = true;
        this.chartPie = echarts.init(document.getElementById("J_chartPieBox"));
        this.chartPie.setOption(this.chartPieOption);
      }
      if (type === 3) {
        this.rightBottom = true;
        this.chartRadar = echarts.init(
          document.getElementById("J_chartRadarBox")
        );
        this.chartRadar.setOption(this.chartRadarOption);
      }
    },
    close(type) {
      if (type === 0) {
        this.leftTop = false;
      }
      if (type === 1) {
        this.rightTop = false;
      }
      if (type === 2) {
        this.leftBottom = false;
      }
      if (type === 3) {
        this.rightBottom = false;
      }
    },
    getLine() {
      // this.$http({
      //     url: this.$http.adornUrl('/affairInfo/affairinfo/statOfTypeInYear'),
      //     method: 'get',
      //     params: this.$http.adornParams()
      // }).then(({ data }) => {
      //     console.log('折线图',data);
      //     this.date = data.data.months
      //     this.data = data.data.series
      //     this.option.xAxis.data = this.date
      //     this.option.series = this.data
      //     this.chartLine = echarts.init(document.getElementById('J_chartLineBox'))
      //     this.chartLine.setOption(this.option)
      //     window.addEventListener('resize', () => {
      //         this.chartLine.resize()
      //     })
      // })
      return new Promise((resolve,reject)=>{
        console.log("折线数据", syslineData);
        this.date = syslineData.months;
        this.data = syslineData.series;
        this.chartLineOption.xAxis.data = this.date;
        this.chartLineOption.series = this.data;
        // this.chart = echarts.init(document.getElementById("J_chartBox"));
        // this.chart.setOption(this.option);
        resolve()
      })

      // window.addEventListener("resize", () => {
      //   this.chartLine.resize();
      // });
    },

    getChartRadar() {
      // this.$http({
      //     url: this.$http.adornUrl('/affairInfo/affairinfo/statOfType'),
      //     method: 'get',
      //     params: this.$http.adornParams()
      // }).then(({data}) => {
      //     if (data && data.code === 0) {
      // this.chartRadar = echarts.init(
      //   document.getElementById("J_chartRadarBox")
      // );
      let arr = [];
      let num = [];
      let max = 0;
      sysradData.forEach(item => {
        max += item.count;
      });
      sysradData.forEach(item => {
        arr.push({
          name: item.statusName,
          max: max
        });
        num.push(item.count);
      });
      this.chartRadarOption.radar.indicator = arr;
      this.chartRadarOption.series[0].data[0].value = num;
      // this.chartRadar.setOption(this.chartRadarOption);
      // window.addEventListener("resize", () => {
      //   this.chartRadar.resize();
      // });
      // }

      // })
    }
  },
  created() {},
  computed: {},
  mounted() {
    console.log("mounted");
    this.$nextTick(() => {
      this.getLine().then(()=>{
        console.log('lineoption',this.chartLineOption)
         this.chart = echarts.init(document.getElementById(`J_chartBox${this.id}`),'light');
          this.chart.setOption(this.chartLineOption);
        // this.chart = echarts.init(document.getElementById(`J_chartBox${this.id}`));
        // this.chart.setOption(this.chartRadarOption);
         window.addEventListener("resize", () => {
            this.chart.resize();
      });
      })
      this.getChartRadar();
    });

    this.mainClientHeight = document.documentElement.clientHeight - 80;
    this.mainClientWidth = document.documentElement.clientWidth - 210;
    this.height = this.mainClientHeight * 0.47 + "px";
    this.charWidth = this.mainClientWidth * 0.33 + "px";
    window.onresize = () => {
      this.mainClientWidth = document.documentElement.clientWidth - 210;
      console.log(this.mainClientWidth);
      this.charWidth = this.mainClientWidth * 0.33 + "px";
      this.mainClientHeight = document.documentElement.clientHeight - 80;
      this.height = this.mainClientHeight * 0.47 + "px";
      if (this.chartLine) {
        this.chartLine.resize();
      }
      if (this.chartBar) {
        this.chartBar.resize();
      }
      if (this.chartPie) {
        this.chartPie.resize();
      }
      if (this.chartRadar) {
        this.chartRadar.resize();
      }
    };
  }
};
</script>

<style scoped lang="scss">
.border{
  border: 1px solid #EBEEF5;
}
.table_box{
  height: 500px;
  width: 100%;
  border:1px solid #eee;
  display: flex;
}
.table_left {
  width:200px;
  display: flex;
  flex-direction: column;
}
.table_item {
  
 justify-content: center;
 border-right: 1px solid #eee;
  display: flex;
  align-items: center;
  font-size: 14px;
  flex: 1;
}
.table_item.active{
  color: blue;
}
.table_item_top{
  height: 250px;
}
.table_item_bottom{
  height:249px;
  border-top:1px solid #eee;
}
.border_top{
  border-top: 1px solid #eee;
}
.table_right{
  display: flex;
}
</style>

