import Vue from 'vue'
import axios from 'axios'
import router from '@/router'
import {  formatFormValue } from './index'
import qs from 'qs'
import merge from 'lodash/merge'
import {
    Message
} from 'element-ui'

const http = axios.create({
    timeout: 30000,
    withCredentials: true,
    headers: {
        'Content-Type': 'application/json; charset=utf-8'
    }
})

/**
 * 请求拦截
 */
http.interceptors.request.use(config => {
    console.log(config);
    let token = Vue.cookie.get('token');
    if(token){
        config.headers['token'] = token // 请求头带上token
         var reg = /alert(.*)/
         var reg1 = /<[^<>]+>/g
         config.url = config.url.replace(reg, '').replace(reg1, '');
    }else {
        router.push({name:'login'})
    }
    // console.log('请求拦截',config.url);
   
    
    return config
}, error => {
    return Promise.reject(error)
})

/**
 * 响应拦截
 */
http.interceptors.response.use(response => {
    if (response.data && response.data.code === 401) { // 401, token失效
        Vue.cookie.delete('token')
        router.options.isAddDynamicMenuRoutes = false
        Message.error(response.data.msg);
        router.push({ name: 'login' })
    } else if (response.data && response.data.code == 500) {
        Message.error(response.data.msg)
    }
    return response
}, error => {
    Message.error('系统异常')
    return Promise.reject(error)
})

/**
 * 请求地址处理
 * @param {*} actionName action方法名称
 */
http.adornUrl = (actionName, platfrom) => {
    // 非生产环境 && 开启代理, 接口前缀统一使用[/proxyApi/]前缀做代理拦截!
    console.log('process.env.OPEN_PROXY',process.env.OPEN_PROXY);
    console.log('process.env.NODE_ENV', process.env.NODE_ENV);
    if (!platfrom) {
        // console.log()
        return (process.env.NODE_ENV !== 'production' && process.env.OPEN_PROXY ? '/proxyApi' : window.SITE_CONFIG.baseUrl) + actionName
    } else {
        console.log('else')
        return (process.env.NODE_ENV !== 'production' && process.env.OPEN_PROXY ? '/proxyApi' : window.SITE_CONFIG[platfrom]) + actionName
    }
}




/**
 * get请求参数处理
 * @param {*} params 参数对象
 * @param {*} openDefultParams 是否开启默认参数?
 */
http.adornParams = (params = {}, openDefultParams = true) => {
    // console.log('adornParams ', params);
    //  params = formatFormValue(params);
    // console.log('处理之后', params);
    var defaults = {
        't': new Date().getTime()
    }
    return openDefultParams ? merge(defaults, params) : params
}



/**
 * post请求数据处理
 * @param {*} data 数据对象
 * @param {*} openDefultdata 是否开启默认数据?
 * @param {*} contentType 数据格式
 *  json: 'application/json; charset=utf-8'
 *  form: 'application/x-www-form-urlencoded; charset=utf-8'
 */
http.adornData = (data = {}, openDefultdata = true, contentType = 'json') => {
     console.log('adornData ', data);
    //  data =  formatFormValue(data);
     console.log('处理之后', data);
    var defaults = {
        't': new Date().getTime()
    }
    data = openDefultdata ? merge(defaults, data) : data
    console.log('data',data);
    return contentType === 'json' ? JSON.stringify(data) : qs.stringify(data)
}

export default http
