<template>
  <el-dialog :modal="false"
    :title="this.dataForm.type == 'add' ? '新增' : '修改'"
    :close-on-click-modal="false" :fullscreen="true"
    :visible.sync="visible">
    <el-form :model="dataForm" :rules="dataRule" ref="dataForm" @keyup.enter.native="dataFormSubmit()" label-width="95px">
      <el-form-item label="部门名称" prop="name">
        <el-input v-model="dataForm.name" placeholder="部门名称"></el-input>
      </el-form-item>
      <el-form-item label="上级部门" prop="parentName">
        <el-popover
          ref="menuListPopover"
          placement="bottom-start"
          trigger="click">
          <el-tree
            :data="menuList"
            :props="menuListTreeProps"
            node-key="depId"
            ref="menuListTree"
            @current-change="menuListTreeCurrentChangeHandle"
            :default-expand-all="true"
            :highlight-current="true"
            :expand-on-click-node="false">
          </el-tree>
        </el-popover>
        <el-input v-model="dataForm.parentName" v-popover:menuListPopover :readonly="true" placeholder="点击选择上级部门" class="menu-list__input"></el-input>
      </el-form-item>
      <el-form-item label="部门代码" prop="code">
        <el-input v-model="dataForm.code" placeholder="部门代码"></el-input>
      </el-form-item>
      <el-form-item label="部门地址" prop="dzbm">
        <el-input v-model="dataForm.dzbm" placeholder="部门地址"></el-input>
      </el-form-item>
      <el-form-item label="部门资质" prop="bmzz">
        <el-input v-model="dataForm.bmzz" placeholder="部门资质"></el-input>
      </el-form-item>
      <el-form-item label="部门类型" prop="dwlx">
        <el-input v-model="dataForm.dwlx" placeholder="部门类型"></el-input>
      </el-form-item>
      <el-form-item v-if="dataForm.type !== 2" label="排序号" prop="orderNum">
        <el-input-number v-model="dataForm.orderNum" controls-position="right" :min="0" label="排序号"></el-input-number>
      </el-form-item>
    </el-form>
    <span slot="footer" class="dialog-footer">
    	<e-button ref="eproButton1"v-on:handleClick="handleClick":parentId="'56'":busType="'editsave'"></e-button>
    <!--  <el-button @click="visible = false">取消</el-button>
      <el-button type="primary" @click="dataFormSubmit()">确定</el-button>-->
    </span>
  </el-dialog>
</template>

<script>
  import { treeDataTranslate } from '@/utils'
  import Icon from '@/icons'
  export default {
    data () {
      var validateUrl = (rule, value, callback) => {
        if (this.dataForm.type === 1 && !/\S/.test(value)) {
          callback(new Error('菜单URL不能为空'))
        } else {
          callback()
        }
      }
      return {
        visible: false,
        dataForm: {
          id: 0,
          type: 1,
          typeList: ['目录', '菜单', '按钮'],
          name: '',
          parentId: 0,
          parentName: '',
          code: '',
          dzbm: '',
          bmzz: '',
          dwlx: '',
          orderNum: 0,
          type:''
        },
        dataRule: {
          name: [
            { required: true, message: '菜单名称不能为空', trigger: 'blur' }
          ],
          parentName: [
            { required: true, message: '上级菜单不能为空', trigger: 'change' }
          ],
          url: [
            { validator: validateUrl, trigger: 'blur' }
          ]
        },
        menuList: [],
        menuListTreeProps: {
          label: 'name',
          children: 'children'
        }
      }
    },
    created () {
      this.iconList = Icon.getNameList()
    },
    methods: {
      handleClick(method,param) {
				if(param === 'undefined') {
					this.$options.methods[method].bind(this)();
				} else {
					this.$options.methods[method].bind(this, param)();
				}
	  	},
			cancel() {
				this.visible = false;
			},
      init (id,type) {
        this.dataForm.id = id || 0
        this.dataForm.type = type
        this.$http({
          url: this.$http.adornUrl('/sys/department/select'),
          method: 'get',
          params: this.$http.adornParams()
        }).then(({data}) => {
          this.menuList = treeDataTranslate(data.menuList, 'depId')
        }).then(() => {
          this.visible = true
          this.$nextTick(() => {
            this.$refs['dataForm'].resetFields()
          })
        }).then(() => {
          if (type=='add') {
            // 新增
            this.$refs['dataForm'].resetFields() //要不要加上？
            this.dataForm.parentId = id;
            this.menuListTreeSetCurrentNode()
          } else {
            // 修改
            this.$http({
              url: this.$http.adornUrl(`/sys/department/info/${this.dataForm.id}`),
              method: 'get',
              params: this.$http.adornParams()
            }).then(({data}) => {
              this.dataForm.id = data.dept.depId   
              this.dataForm.name = data.dept.name
              this.dataForm.parentId = data.dept.parentId
              this.dataForm.code = data.dept.code
              this.dataForm.dzbm = data.dept.dzbm
              this.dataForm.bmzz = data.dept.bmzz
              this.dataForm.dwlx = data.dept.dwlx
              this.dataForm.orderNum = data.dept.orderNum
              this.menuListTreeSetCurrentNode()
            })
          }
        })
      },
      // 菜单树选中
      menuListTreeCurrentChangeHandle (data, node) {
        this.dataForm.parentId = data.depId
        this.dataForm.parentName = data.name
      },
      // 菜单树设置当前选中节点
      menuListTreeSetCurrentNode () {
      	//alert(this.dataForm.parentId)
        this.$refs.menuListTree.setCurrentKey(this.dataForm.parentId)
        this.dataForm.parentName = (this.$refs.menuListTree.getCurrentNode() || {})['name']
      },
      // 图标选中
      iconActiveHandle (iconName) {
        this.dataForm.icon = iconName
      },
      // 表单提交
      dataFormSubmit () {
				var url = '';      	
      	if(this.dataForm.type=='add'){
      		url=`/sys/department/save`;
      		this.depId = ''
      	}else{
      		url=`/sys/department/update`;
      		this.depId = this.dataForm.id || undefined
      	}
        this.$refs['dataForm'].validate((valid) => {
          if (valid) {
            this.$http({
              url: this.$http.adornUrl(url),
              method: 'post',
              data: this.$http.adornData({
                'depId': this.depId,
                'name': this.dataForm.name,
                'parentId': this.dataForm.parentId,
                'code': this.dataForm.code,
                'dzbm': this.dataForm.dzbm,
                'dwlx': this.dataForm.dwlx,
                'bmzz': this.dataForm.bmzz,
                'dwlx': this.dataForm.dwlx,
                'orderNum': this.dataForm.orderNum
              })
            }).then(({data}) => {
             if (data && data.code === 0) {
              	//if (1==1) {
                this.$message({
                  message: '操作成功',
                  type: 'success',
                  duration: 1500,
                  onClose: () => {
                    this.visible = false
                    this.$emit('refreshDataList')
                  }
                })
              } else {
                this.$message.error(data.msg)
              }
            })
          }
        })
      }
    }
  }
</script>

<style lang="scss">
  .mod-menu {
    .menu-list__input,
    .icon-list__input {
       > .el-input__inner {
        cursor: pointer;
      }
    }
    &__icon-popover {
      max-width: 370px;
    }
    &__icon-list {
      max-height: 180px;
      padding: 0;
      margin: -8px 0 0 -8px;
      > .el-button {
        padding: 8px;
        margin: 8px 0 0 8px;
        > span {
          display: inline-block;
          vertical-align: middle;
          width: 18px;
          height: 18px;
          font-size: 18px;
        }
      }
    }
    .icon-list__tips {
      font-size: 18px;
      text-align: center;
      color: #e6a23c;
      cursor: pointer;
    }
  }
  
</style>
