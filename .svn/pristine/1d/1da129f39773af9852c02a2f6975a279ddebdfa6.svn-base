<template>
  <div class="mod-user">
    <el-form  class="dialog_head_form"
      label-width="auto" :model="dataForm" @keyup.enter.native="getDataList()">
      <el-row :gutter="40">
        <el-col :span="7">
          <el-form-item label="昵称">
            <el-input v-model="dataForm.nickname" clearable></el-input>
          </el-form-item>
        </el-col>
        <el-col :span="7">
          <el-form-item label="手机号">
            <el-input v-model="dataForm.mobile" clearable></el-input>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item>
            <el-button v-if="isAuth('sys:user:list')" type="primary" @click="getDataList('init')">查询</el-button>
            <el-button
              v-if="isAuth('sys:user:save')"
              type="add"
              @click="addOrUpdateHandle()"
            >新增</el-button>
            <el-button
              v-if="isAuth('sys:user:delete')"
              type="delete"
              :disabled="!dataListSelections.length"
              @click="deleteHandle()"
            >删除</el-button>
            <!-- <e-button ref="eproButton" v-on:handleClick="handleClick" :parentId="'2'" :busType="'query'"></e-button> -->
          </el-form-item>
        </el-col>
      </el-row>
    </el-form>
    <el-table
      @header-dragend="handleDragend"
      :max-height="500"
      :data="dataList"
      border
      v-loading="dataListLoading"
      @selection-change="selectionChangeHandle"
      style="width: 100%;"
    >
      <el-table-column type="selection" header-align="center" align="center" width="50"></el-table-column>
      <el-table-column prop="nickname" header-align="center" align="center" label="昵称"></el-table-column>
      <el-table-column prop="username" header-align="center" align="center" label="用户名"></el-table-column>
      <el-table-column prop="email" header-align="center" align="center" label="邮箱"></el-table-column>
      <el-table-column prop="mobile" header-align="center" align="center" label="手机号"></el-table-column>
      <el-table-column prop="status" header-align="center" align="center" label="状态">
        <template slot-scope="scope">
          <el-tag v-if="scope.row.status === 0" size="small" type="danger">禁用</el-tag>
          <el-tag v-else size="small">正常</el-tag>
        </template>
      </el-table-column>
      <el-table-column
        prop="createTime"
        header-align="center"
        align="center"
        width="180"
        label="创建时间"
      ></el-table-column>
      <el-table-column fixed="right" header-align="center" align="center" width="150" label="操作">
        <template slot-scope="scope">
          <e-button
            ref="eproButton1"
            v-on:handleClick="handleClick"
            :parentId="'2'"
            :busType="'update'"
            :params="''+scope.row.userId"
          ></e-button>
        </template>
      </el-table-column>
    </el-table>
    <el-pagination
      @size-change="sizeChangeHandle"
      @current-change="currentChangeHandle"
      :current-page="pageIndex"
      :page-sizes="[10, 20, 50, 100]"
      :page-size="pageSize"
      :total="totalPage"
      layout="total, sizes, prev, pager, next, jumper"
    ></el-pagination>
    <!-- 弹窗, 新增 / 修改 -->
    <add-or-update v-if="addOrUpdateVisible" ref="addOrUpdate" @refreshDataList="getDataList"></add-or-update>
    <uploadDialog v-if="uploadVisible" ref="uploadDialog" @refreshDataList="getDataList"></uploadDialog>
  </div>
</template>

<script>
import AddOrUpdate from "../user/user-add-or-update";
import UploadDialog from "../user/upload-dialog";
import config from "@/utils/config.js";

export default {
  data() {
    return {
      height: this.$store.state.common.mainClientHeight - 100 - 47,
      dataForm: {
        userName: "",
        nickname: "",
        mobile: ""
      },
      dataList: [],
      pageIndex: 1,
      pageSize: 10,
      totalPage: 0,
      dataListLoading: false,
      dataListSelections: [],
      addOrUpdateVisible: false,
      uploadVisible: false
    };
  },
  components: {
    AddOrUpdate,
    UploadDialog
  },
  activated() {
    this.getDataList();
  },
  methods: {
    handleDragend(n, o, a, b) {
      config.tableDragendHandle(n, o, a);
    },
    handleClick(method, param) {
      if (param === undefined) {
        if (method === "getDataList") {
          this.$options.methods[method].bind(this, "init")();
        } else {
          this.$options.methods[method].bind(this)();
        }
      } else {
        this.$options.methods[method].bind(this, param)();
      }
    },
    // 获取数据列表
    getDataList(type) {
      if (type === "init") {
        this.pageIndex = 1;
      }
      this.dataListLoading = true;
      this.$http({
        url: this.$http.adornUrl("/sys/user/list"),
        method: "get",
        params: this.$http.adornParams({
          page: this.pageIndex,
          limit: this.pageSize,
          nickname: this.dataForm.nickname,
          mobile: this.dataForm.mobile
        })
      }).then(({ data }) => {
        if (data && data.code === 0) {
          this.dataList = data.page.list;
          this.totalPage = data.page.totalCount;
        } else {
          this.dataList = [];
          this.totalPage = 0;
        }
        this.dataListLoading = false;
      });
    },
    getNowFormatDate() {
      var date = new Date();
      var seperator1 = "-";
      var year = date.getFullYear();
      var month = date.getMonth() + 1;
      var strDate = date.getDate();
      if (month >= 1 && month <= 9) {
        month = "0" + month;
      }
      if (strDate >= 0 && strDate <= 9) {
        strDate = "0" + strDate;
      }
      var currentdate = year + seperator1 + month + seperator1 + strDate;
      return currentdate;
    },
    exportExcel(name) {
      name = "用户信息";
      var myDate = this.getNowFormatDate();
      name = name + myDate.myReplace("-", "");
      var date = new Date();
      var time =
        date.getHours() + "" + date.getMinutes() + "" + date.getSeconds();
      name = name + "" + time;
      this.$http({
        url: this.$http.adornUrl("/sys/user/exportExcel"),
        method: "post",
        responseType: "arraybuffer",
        params: this.$http.adornParams({
          page: this.pageIndex,
          limit: this.pageSize,
          username: this.dataForm.userName
        })
      }).then(({ data }) => {
        /*let blob = new Blob([data], {type: "application/vnd.ms-excel"});
　　　　　　 let objectUrl = URL.createObjectURL(blob); 
　　　　　　 window.location.href = objectUrl;*/
        let blob = new Blob([data], {
          type: "application/vnd.ms-excel"
        });
        let url = URL.createObjectURL(blob);
        let link = document.createElement("a");
        link.style.display = "none";
        link.href = url;
        link.setAttribute("download", name);
        document.body.appendChild(link);
        link.click();
      });
    },

    importExcel() {
      this.uploadVisible = true;
      this.$nextTick(() => {
        this.$refs.uploadDialog.init();
      });
    },
    formatJson(filterVal, jsonData) {
      return jsonData.map(v => filterVal.map(j => v[j]));
    },
    // 每页数
    sizeChangeHandle(val) {
      this.pageSize = val;
      this.pageIndex = 1;
      this.getDataList();
    },
    // 当前页
    currentChangeHandle(val) {
      this.pageIndex = val;
      this.getDataList();
    },
    // 多选
    selectionChangeHandle(val) {
      this.dataListSelections = val;
    },
    // 新增 / 修改
    addOrUpdateHandle(id) {
      this.addOrUpdateVisible = true;
      this.$nextTick(() => {
        this.$refs.addOrUpdate.init(id);
      });
    },
    // 删除
    deleteHandle(id) {
      console.log(id);
      var userIds = id
        ? [id]
        : this.dataListSelections.map(item => {
            return item.userId;
          });
      if (userIds.length === 0) {
        this.$message.error("请选择一条或多条数据");
        return;
      }
      this.$confirm("删除", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.$http({
            url: this.$http.adornUrl("/sys/user/delete"),
            method: "post",
            data: this.$http.adornData(userIds, false)
          }).then(({ data }) => {
            if (data && data.code === 0) {
              this.$message({
                message: "删除成功",
                type: "success",
                duration: 1500,
                onClose: () => {
                  this.getDataList();
                }
              });
            } else {
              this.$message.error(data.msg);
            }
          });
        })
        .catch(() => {});
    }
  }
};

String.prototype.myReplace = function(f, e) {
  //吧f替换成e
  var reg = new RegExp(f, "g"); //创建正则RegExp对象
  return this.replace(reg, e);
};
</script>
