<template>
  <el-dialog
    :close-on-click-modal="false"
    :show-close="false"
    :fullscreen="true"
    :modal="false"
    :visible.sync="visible"
    :v-loading="loading"
  >
    <div slot="title" class="dialog_headslot">
      {{!this.formData.id ? '维修信息' : '维修信息'}}
      <el-button  @click="visible = false">返回</el-button>
    </div>
    <div class="subtitle_header">
      <div>设备信息</div>
      <el-button @click="showElevatorList" style="height:36px" v-if="!formData.id||!formData.regCode">选择</el-button>
    </div>
    <div class="form-view-wraper">
      <el-row :gutter="40">
        <el-col :span="8">
          <div class="form-view-item">
            注册代码：
            <span>{{formData.regCode}}</span>
          </div>
        </el-col>
        <el-col :span="8">
          <div class="form-view-item">
            维保单位：
            <span>{{formData.maintenanceName}}</span>
          </div>
        </el-col>
      </el-row>
      <el-row :gutter="40">
        <el-col :span="8">
          <div class="form-view-item">
            电梯类型：
            <span>{{type}}</span>
          </div>
        </el-col>
        <el-col :span="16">
          <div class="form-view-item">
            电梯地址：
            <span>{{formData.local}}</span>
          </div>
        </el-col>
      </el-row>
    </div>
    <el-form
      :model="formData"
      :rules="rules"
      ref="form"
      @keyup.enter.native="dataFormSubmit()"
      class="form"
      label-width="auto"
    >
      <el-row :gutter="40">
        <el-col :span="8">
          <el-form-item label="联系电话" prop="applicantPhone">
            <el-input
              v-model="formData.applicantPhone"
              :disabled="unitType!=3||formData.repairStutas!==''"
              clearable
            ></el-input>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item label="是否应急" prop="urgent">
            <el-select
              placeholder="请选择"
              :disabled="unitType!=3||formData.repairStutas!==''"
              v-model="formData.urgent"
              clearable
            >
              <el-option
                v-for="item in options"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              ></el-option>
            </el-select>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item label="申请人" prop="applicant">
            <el-input
              v-model="formData.applicant"
              :disabled="unitType!=3||formData.repairStutas!==''"
              clearable
            ></el-input>
          </el-form-item>
        </el-col>
      </el-row>
      <!-- <el-row :gutter="30">
          
      </el-row>-->
      <el-row :gutter="30">
        <el-col :span="24">
          <el-form-item label="故障原因" prop="remarks">
            <el-input
              type="textarea"
              v-model="formData.remarks"
              :disabled="unitType!=3||formData.repairStutas!==''"
              clearable
            ></el-input>
          </el-form-item>
        </el-col>
      </el-row>
      <el-row :gutter="30">
        <el-col :span="24">
          <el-form-item label="损害情况" prop="component">
            <el-input
              type="textarea"
              v-model="formData.component"
              :disabled="unitType!=3||formData.repairStutas!==''"
              clearable
            ></el-input>
          </el-form-item>
        </el-col>
      </el-row>
      <el-row
        :gutter="30"
        v-if="formData.repairStutas==2||formData.repairStutas==3||formData.repairStutas==4||formData.repairStutas==5"
      >
        <el-col :span="24">
          <el-form-item label="维修过程" prop="repairProcess">
            <el-input
              type="textarea"
              v-model="formData.repairProcess"
              :disabled="unitType!=3||formData.repairStutas!=='2'"
              clearable
            ></el-input>
          </el-form-item>
        </el-col>
      </el-row>
      <!-- <el-row
          :gutter="30"
          v-if="formData.repairStutas==0||formData.repairStutas==1||formData.repairStutas==3||formData.repairStutas==5"
        >
          <el-col :span="24">
            <el-form-item label="审核不通过原因" prop="repairReason">
              <el-input type="textarea" v-model="formData.repairReason" :disabled="formData.repairStutas==5||unitType!=='2'||unitType!=='1'||formData.repairStutas==1" clearable></el-input>
            </el-form-item>
          </el-col>
      </el-row>-->
    </el-form>
    <div class="subtitle">维修内容</div>
    <el-table
      :data="tableData"
      width="80%"
      top="8%"
      border
      show-summary
      :summary-method="handleGetSummaries"
    >
      <el-table-column prop="items" label="品目" align="center"></el-table-column>
			<el-table-column prop="count" align="center" label="数量"></el-table-column>
      <el-table-column prop="price" label="单价（元）" align="center"></el-table-column>
      <el-table-column prop="coltotal" align="center" :formatter="formatcoltotal" label="小计（元）"></el-table-column>
    </el-table>
    <el-form
      ref="itemForm"
      :model="itemFormData"
      class="itemForm"
      label-width="auto"
      :rules="itemFormRules"
    >
      <el-row>
        <el-col :span="6">
          <el-form-item prop="items">
            <el-input v-model="itemFormData.items" placeholder="品目"></el-input>
          </el-form-item>
        </el-col>
        <el-col :span="6">
					<el-form-item prop="count">
					  <el-input v-model="itemFormData.count" placeholder="数量"></el-input>
					</el-form-item>
        </el-col>
        <el-col :span="6">
					<el-form-item prop="price">
					  <el-input v-model="itemFormData.price" placeholder="单价"></el-input>
					</el-form-item>
        </el-col>
        <div>
          <el-button type="primary" @click="addRow" style="margin-left:20px">确认</el-button>
          <el-button @click="hideItemForm" style="margin-left:20px">取消</el-button>
        </div>
      </el-row>
    </el-form>
    <div style="text-align:center;margin:10px 0;" v-if="formData.repairStutas===''&&unitType==3">
      <i class="el-icon-circle-plus-outline" size="32" style="font-size:24px" @click="showItemForm"></i>
    </div>
    <div class="button_wraper">
      <el-button
        type="warning"
        v-if="isAuth('repairplan:repairplan:qr')&&formData.repairStutas==2"
        @click="updateStatus"
      >维修完成</el-button>
      <!-- <el-button
        type="success"
        v-if="formData.repairStutas==='0'&&isAuth('repairplan:pass')&&isunExamin||formData.repairStutas==='3'&&isAuth('repairplan:pass')&&isunExamin"
        @click="handlePass(formData.repairStutas)"
      >审核通过</el-button> -->
      <el-button
        type="add"
        v-if="formData.repairStutas==='0'&&isAuth('repairplan:dispass')&&isunExamin||formData.repairStutas==3&&isAuth('repairplan:dispass')&&isunExamin"
        @click="showCheckRemark"
      >审核</el-button>

      <el-button
        type="primary"
        v-if="formData.repairStutas==0&&isAuth('repairplan:repairplan:qr')"
        @click="dataFormSubmit()"
      >确定</el-button>
    </div>
    <select-elevator
      v-if="showElevatorDialog"
      @confirm="elevatorSelectConfirm"
      ref="elevatorSelect"
    ></select-elevator>
    <audit-component v-if="dispassresonVisible" ref="audit" @confirm="handleAuditConfirm"></audit-component>
  </el-dialog>
</template>

<script>
import { isMobile, isPhone } from "@/utils/validate";
import selectElevator from "@/components/select-single-elevator.vue";
import auditComponent from '@/components/audit.vue'
export default {
  components: {
    selectElevator,
    auditComponent
  },
  created() {
    console.log("created");
  },
  activated(){
    console.log('activated');
  },  
  computed: {
    isunExamin() {
      // 物业单位/业主单位是否未审核
      let unitType = this.$store.state.user.userInfo.unitType;
      console.log(unitType);
      if (unitType == 2 && this.formData.juedge != 2) {
        // 物业单位
        return true;
      } else if (unitType == 1 && this.formData.juedge != 1) {
        //业主单位
        return true;
      } else {
        return false;
      }
    },
    unitType() {
      return this.$store.getters["user/userInfo"].unitType;
    },
    canExam() {
      return this.unitType == 1 || this.unitType == 2;
    }
  },

  data() {
    var validateMobile = (rule, value, callback) => {
      if (isMobile(value) || isPhone(value)) {
        callback();
      } else {
        callback("申请人联系电话格式有误");
      }
    };

    return {
      dispassresonVisible: false,
      loading: false,
      visible: false,
      dialogVisible: false,
      showElevatorDialog: false,
      type: "", //电梯类型
      options: [
        {
          label: "是",
          value: "1"
        },
        {
          label: "否",
          value: "2"
        }
      ],
      auditStatus: "", //审核状态1.通过2.不通过
      formData: {
        applicant: "", //申请人
        applicantPhone: "", //申请人电话
        urgent: "", //是否应急维修1应急维修2普通维修
        regCode: "", //注册码
        component: "", //损坏情况
        remarks: "", //故障原因
        maintenanceId: "", //维保单位id
        maintenanceUnitName: "", //维保单位
        elevatorStatus: "", //电梯类型
        repairStutas: "",
        propertyId: "", //物业单位id
        depotId: "", //仓库id
        ownerId: "", //业主id
        propertyCheckTime: "", //物业申请确认时间
        depotCheckTime: "", //仓库申请确认时间
        ownerCheckTime: "", //业主申请确认时间
        propertyRepairTime: "", //物业维修确认时间
        depotRepairTime1: "", //
        ownerRepairTime1: "", //
        createUserId: "", //创建者ID
        updatePerson: "", //修改人
        totalSum: "",
        repairStutas: "",
        items: [],
        repairReason:'',//不通过原因
        juedge: "" //判断是否审核过
      },
      itemFormData: {
        price: "",
        items: "",
        count: ""
      },
      totalSum: "", //总金额
      tableData: [],
      itemFormRules: {
        price: [
          {
            required: true,
            message: "单价不能为空"
          }
        ],
        items: [
          {
            required: true,
            message: "品目不能为空"
          }
        ],
        count: [
          {
            required: true,
            message: "数量不能为空"
          }
        ]
      },
      rules: {},
      addRules: {
        component: [
          {
            required: true,
            message: "损害情况不能为空"
          }
        ],
        remarks: [
          {
            required: true,
            message: "故障原因不能为空"
          }
        ],
        urgent: [
          {
            required: true,
            message: "请选择是否应急"
          }
        ],
        applicant: [
          {
            required: true,
            message: "申请人不能为空"
          }
        ],
        applicantPhone: [
          {
            required: true,
            message: "申请人联系电话不能为空"
          },
          {
            validator: validateMobile
          },
          {
            trigger: "blur"
          }
        ],
        regCode: [
          {
            required: true,
            message: "注册码不能为空"
          }
        ]
      }
    };
  },
  watch: {
    "formData.elevatorStatus"(val) {
      console.log("watch200");
      if (val == 1) {
        this.type = "客梯";
      } else if (val == 2) {
        this.type = "货梯";
      } else {
        this.type = "";
      }
    }
  },
  methods: {
    init(id) {
      console.log("id", id);
      // console.log("formData", this.formData);
      this.formData.id = id;
      this.tableData = [];
      this.visible = true;
      this.$nextTick(() => {
        this.hideItemForm();
        this.$refs["form"].resetFields();
        this.$refs["itemForm"].resetFields();
        this.formData.regCode = "";
        this.formData.maintenanceName = "";
        this.formData.elevatorStatus = "";
        this.formData.local = "";
        this.formData.repairStutas = ""; //清空维修状态
        this.formData.juedge = ""; //
        this.formData.repairReason = ""; //

        if (this.formData.id) {
          this.loading = true;
          this.$http({
            url: this.$http.adornUrl(
              `/repairplan/repairplan/info/${this.formData.id}`
            ),
            method: "get",
            params: this.$http.adornParams()
          }).then(({ data }) => {
            if (data && data.code == 0) {
              this.loading = false;
              console.log("data---------------", data.repairPlan.repairStutas);
              let repairPlan = data.repairPlan;
              this.formData = repairPlan;
              this.tableData = JSON.parse(repairPlan.items);
            }
          });
        }
      });
    },
    showElevatorList() {
      this.showElevatorDialog = true;
      this.$nextTick(() => {
        this.$refs.elevatorSelect.init(this.formData.regCode);
      });
    },
    elevatorSelectConfirm(val) {
      this.formData.regCode = val.regcode;
      this.formData.maintenanceId = val.maintenanceid;
      this.formData.local = val.locals;
      this.formData.maintenanceName = val.unitname;
      this.formData.elevatorStatus = val.elevatorstatus;
    },
    formatcoltotal(row) {
      return row.count * row.price;
    },
    handleGetSummaries(value) {
      const { columns, data } = value;
      let arr = [];
      let sum = 0;
      data.forEach((item, index) => {
        sum += item.count * item.price;
      });
      this.formData.totalSum = sum;
      arr[2] = sum;
      arr.unshift("合计（元）");
      return arr;
    },
    showItemForm() {
      let dom = document.getElementsByClassName("itemForm")[0];
      dom.style.display = "block";
      dom.style.transform = "none";
    },
    hideItemForm() {
      let dom = document.getElementsByClassName("itemForm")[0];
      dom.style.display = "none";
      dom.style.transform = "translateY(-100%)";
    },
    addRow() {
      this.$refs["itemForm"].validate(valid => {
        if (valid) {
          this.tableData.push({
            items: this.itemFormData.items,
            price: this.itemFormData.price,
            count: this.itemFormData.count
          });
        }
        let dom = document.getElementsByClassName("itemForm")[0];
        dom.style.display = "none";
        dom.style.transform = "translateY(-100%)";
      });
    },
    // 表单提交
    dataFormSubmit() {
      console.log("formsubmmit", this.formData);
      if (!this.tableData || !this.tableData.length) {
        this.$message({
          type: "warning",
          message: "请填写维修内容",
          duration: 1500
        });
        return false;
      }
      this.$refs["form"].validate(valid => {
        if (valid) {
          this.formData.items = JSON.stringify(this.tableData);
          this.$http({
            url: this.$http.adornUrl(
              `/repairplan/repairplan/${!this.formData.id ? "save" : "update"}`
            ),
            method: "post",
            data: this.$http.adornData(this.formData)
          })
            .then(({ data }) => {
              if (data && data.code === 0) {
                this.$message({
                  message: "操作成功",
                  type: "success",
                  duration: 1500,
                  onClose: () => {
                    this.visible = false;
                    this.dispassresonVisible = false;
                    this.$emit("refreshDataList");
                  }
                });
              } else {
                this.$message.error(data.error);
              }
            })
            .catch(e => {});
        }
      });
    },
   
    updateStatus() {
      this.formData.repairStutas = "3";
      this.formData.juedge = "";

      this.$confirm(`维修完成?`, "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        if (!this.formData.repairProcess) {
          this.$message({
            type: "warning",
            message: "请填写维修过程",
            duration: 1500
          });
          return false;
        }
        console.log("updateStatus", this.formData.id);
        this.$http({
          url: this.$http.adornUrl(`/repairplan/repairplan/update`),
          method: "post",
          data: this.$http.adornData(this.formData)
        }).then(({ data }) => {
          if (data && data.code === 0) {
            this.$message({
              message: "操作成功",
              type: "success",
              duration: 1500,
              onClose: () => {
                this.visible = false;
                this.$emit("refreshDataList");
              }
            });
          }
        });
      });
    },
     showCheckRemark(id) {
      console.log(" showCheckRemark", id);
      // this.checkId = id;
      this.dispassresonVisible = true;
      this.$nextTick(()=>{
        this.$refs.audit.init();
      })
    },
    
    handleAuditConfirm(obj) {
      console.log('handleAuditConfirm',obj);
      // this.auditStatus = obj.auditStatus;
      if(obj.auditStatus==1){
        this.handlePass();
      }else {
        this.formData.repairReason = obj.reason;
        this.handleDisPass();
      }
      
    },
    handlePass() {
      if (this.formData.repairStutas == 0) {
        this.formData.repairStutas = "2";
      } else if (this.formData.repairStutas == 3) {
        this.formData.repairStutas = "4";
      }
      if (this.unitType == "1") {
        this.formData.juedge = "1";
      } else if (this.unitType == "2") {
        this.formData.juedge = "2";
      }
      this.dataFormSubmit();
    },

    handleDisPass() {
      console.log("dispass");

      if (this.formData.repairStutas == 0) {
        this.formData.repairStutas = "1";
      } else if (this.formData.repairStutas == 3) {
        this.formData.repairStutas = "5";
      }
      if (this.unitType == "1") {
        this.formData.juedge = "1";
      } else if (this.unitType == "2") {
        this.formData.juedge = "2";
      }
      this.dispassresonVisible = false;
      this.dataFormSubmit();
    },
		handleRepair(regCodes){
			this.visible=true;
			 this.formData.regCode=regCodes;
			 let url ="/elevatorinformation/elevatorinformation/list" 
			  this.$http({
			    url: this.$http.adornUrl(url),
			    method: "get",
			    params: this.$http.adornParams({
			      page: 1,
			      limit: 1,
			      regCodes:regCodes
			    })
			  }).then(({ data }) => {
			    if (data && data.code === 0) {
			        this.formData.regCode=data.list.regcode;
			         this.formData.maintenanceName=data.list.unitname;
							 this.formData.type=data.list.elevatorstatus;
							 this.formData.local=data.list.locals;
			    } 
			  })
			}
		}
  }

</script>
<style scoped>
.repair_header {
  font-size: 18px;
  padding: 8px 10px;
  margin-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.itemForm {
  /* transform: translateY(-100%); */
  /* display: none;
   */
  display: none;
  /* opacity: 0; */
  transition: all 0.5s;
}
</style>