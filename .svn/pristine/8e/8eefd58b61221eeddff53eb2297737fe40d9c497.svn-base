<!--  -->
<template>
  <div class="mod-home" v-loading="loading">
    <!-- <div  :style="{'height': height, 'width': '100%'}">
      <div id="chartBox" :style="{'width':width,'height':height}"></div>
    </div>-->
    <!-- <div class="chart_title">报警类型统计</div> -->
    <el-form class="dialog_head_form" @keyup.enter.native="handleQuery()">
      <el-row :gutter="40">
        <el-col :span="8">
          <el-form-item label="注册代码" prop="regCode">
            <el-input v-model.trim="formData.regCode" clearable>
              <template slot="append">
                <el-button @click="selectElevator">选择</el-button>
              </template>
            </el-input>
          </el-form-item>
        </el-col>
        <el-col :span="6">
          <!-- <select-month></select-month> -->
          <el-form-item label="日期">
             <el-date-picker
              v-model.trim="dateValue"
              @change="dateChange"
               start-placeholder="开始月份"
              end-placeholder="结束月份"
              value-format="yyyy-M"
               unlink-panels
              :picker-options="pickerOptions"
              type="monthrange"
            ></el-date-picker>
          </el-form-item>
        </el-col>
        <el-col :span="6">
          <el-form-item label="区域">
            <el-cascader
              v-model.trim="areaValue"
              :options="areaData"
              :props="{ checkStrictly: true }"
              @change="handleAreaChange"
              clearable
            ></el-cascader>
          </el-form-item>
        </el-col>
        <el-col :span="2">
          <el-button @click="handleQuery" type="query">查询</el-button>
        </el-col>
      </el-row>
    </el-form>
    <el-tabs type="card" value="chart" @tab-click="handleChange">
      <el-tab-pane label="图表" name="chart">
        <div class="chartContainer" :style="{'height':containerHeight-21+'px'}">
          <div class="left" style="width:65%">
            <div id="totalChartBox" :style="{'height':'95%'}"></div>
          </div>
          <div class="right" style="width:35%">
            <div v-if="chartDataList.length">
              <div
                class="right_item"
                :class="{border_bottom:index!=2}"
                v-for="(item,index) in chartDataList"
                :key="index"
              >
                <div class="chart_subtitle_box">
                  <span class="chart_circle">{{index+1}}</span>
                  <span class="chart_subtitle">{{item.locals}}</span>
                  <popover>
                     <div class="popover_content">
                      <div>注册代码：{{item.regCode}}</div>
                      <div>电梯地址：{{item.local}}</div>
                      <div>维保单位：{{item.maintenanceName}}</div>
                      <div>投产时间：{{formatDate(item.commissioningTime)}}</div>
                      <div>电梯品牌：{{item.elevatorBrand}}</div>
                    </div>
                    <i class="el-icon-info" slot="reference"></i>
                  </popover>
                </div>
                <div :id="`chartBox${index}`" :style="{'height':'100%'}"></div>
              </div>
            </div>
            <!-- <div class="right_item border_bottom">
              <div id="secChartBox" :style="{'height':'100%'}"></div>
            </div>
            <div class="right_item">
              <div id="thiChartBox" :style="{'height':'100%'}"></div>
            </div>-->
          </div>
        </div>
      </el-tab-pane>
      <el-tab-pane label="列表" name="list">
        <el-table border :data="dataList" v-loading="loading">
          <el-table-column label="注册代码" prop="regCode" align="center"></el-table-column>
          <el-table-column label="电梯地址" show-overflow-tooltip prop="locals" align="center"></el-table-column>
          <el-table-column label="维保单位" show-overflow-tooltip prop="maintenanceName" align="center"></el-table-column>
          <el-table-column label="检修时间(小时)" width="150" prop="patrolTime" align="center"></el-table-column>
          <el-table-column
            label="故障停梯率"
            width="150"
            :formatter="formatpoint"
            prop="failureStopRate"
            align="center"
          ></el-table-column>
        </el-table>
        <el-pagination
          @size-change="sizeChangeHandle"
          @current-change="currentChangeHandle"
          :current-page="pageIndex"
          :page-sizes="[5, 10, 20, 50]"
          :page-size="pageSize"
          :total="totalCount"
          layout="total, sizes, prev, pager, next, jumper"
        ></el-pagination>
      </el-tab-pane>
    </el-tabs>

    <select-elevator
      v-if="showElevatorselectDialog"
      ref="elevatorSelector"
      @confirm="selectElevatorConfirm"
    ></select-elevator>
  </div>
</template>

<script>
import echart from "echarts";
// import selectMonth from '@/components/selectMonth.vue';
// import selectElevator from "@/components/select-single-elevator.vue";
import statical from "@/utils/mixins/staticalAnalysis";
import pagination from "@/utils/mixins/pagination";
export default {
  mixins: [statical, pagination],
  activated() {
    console.log("actie");
    if (this.totalChart) {
      this.totalChart.resize();
    }
    if (this.chart0) {
      this.chart0.resize();
    }
      if (this.chart1) {
      this.chart1.resize();
    }
      if (this.chart2) {
      this.chart2.resize();
    }
  },
  data() {
    return {
      showElevatorselectDialog: false,
      currentIndex: 0, //当前的tab下标
      loading: false,
      areaValue: [],
      pageIndex: 1,
      pageSize: 10,
      totalCount: 0,
      dataList: [],
      chartDataList: [],
      currentValue: "chart",
      currentIndex: 0,
      dateValue:'',
      formData: {
        regCode: "",
        years: "",
        months: "",
        province: "",
        city: "",
        district: "",
        startTime:null
      },
      height: "",
      containerHeight: "",
      width: "",
      totalChart:null,
      chart0: null,
      chart1: null,
      chart2: null,
      areaData: [],
      totalOption: {
         color:['#2F6A92'],
        title: {
          text: "",
          x: "center",
          textStyle: {
            fontWeight: "normal", //标题颜色
            fontSize: 14
          }
        },
        tooltip: {
          trigger: "axis"
          // formatter:'报警类型：{a}</br> 数量：{c}'
        },
       grid: {
          left: "5%",
          right: "10%",
          bottom: "5%",
          top: "12%",
          containLabel: true
        },
        xAxis: {
          type: "category",
          name: "日期",
          boundaryGap: false,
          // splitLine: { show: false },
          data: [],
          axisLine: {
            lineStyle: {
              type: "solid",
              color: "eee", //坐标线的颜色
              width: "2" //坐标线的宽度
            }
          },
          axisLabel: {
            textStyle: {}
          }
        },
        yAxis: {
          type: "value",
          // name: "故障停梯率",
           nameRotate: 270,
          nameGap: 45,
          nameLocation: "middle",
          nameTextStyle: {
            // fontStyle:{
            //   fontSize:'22px'
            // }
          },
          axisLine: {
            lineStyle: {
              type: "solid",
              color: "eee", //左边线的颜色
              width: "2" //坐标线的宽度
            }
          },
          axisLabel: {
            textStyle: {}
          }
        },
        series: [
          {
            name: "故障率",
            type: "line",
            label: {},
            data: []
          }
        ]
      },
      option0: {
         color:['#2F6A92'],
        title: {
          text: "",
          x: "center",
          textStyle: {
            fontWeight: "normal", //标题颜色
            fontSize: 14
          }
        },
        tooltip: {
          trigger: "axis"
          // formatter:'报警类型：{a}</br> 数量：{c}'
        },
        grid: {
          left: "5%",
          right: "12%",
          bottom: "15%",
          top: "12%",
          containLabel: true
        },
        xAxis: {
          type: "category",
          name: "日期",
          boundaryGap: false,
          // splitLine: { show: false },
          data: [],
          axisLine: {
            lineStyle: {
              type: "solid",
              color: "eee", //坐标线的颜色
              width: "2" //坐标线的宽度
            }
          },
          axisLabel: {
            textStyle: {}
          }
        },
        yAxis: {
          type: "value",
          // name: "故障停梯率",
           nameRotate: 270,
          nameGap: 45,
          nameLocation: "middle",
          nameTextStyle: {
            fontStyle:{
              fontSize:12
            }
          },
          axisLine: {
            lineStyle: {
              type: "solid",
              color: "eee", //左边线的颜色
              width: "2" //坐标线的宽度
            }
          },
          axisLabel: {
            textStyle: {}
          }
        },
        series: [
          {
            name: "故障率",
            type: "line",
            label: {},
            data: []
          }
        ]
      },
      option1: {
         color:['#2F6A92'],
        title: {
          text: "",
          x: "center",
          textStyle: {
            fontWeight: "normal",
            fontSize: 10
          }
        },
        tooltip: {
          trigger: "axis"
          // formatter:'报警类型：{a}</br> 数量：{c}'
        },
         grid: {
          left: "5%",
          right: "12%",
          bottom: "15%",
          top: "12%",
          containLabel: true
        },
        xAxis: {
          type: "category",
          boundaryGap: false,
          name: "日期",
          // splitLine: { show: false },
          data: [],
          axisLine: {
            lineStyle: {
              type: "solid",
              color: "eee", //坐标线的颜色
              width: "2" //坐标线的宽度
            }
          },
          axisLabel: {
            textStyle: {}
          }
        },
        yAxis: {
          type: "value",
          // name: "故障停梯率",
           nameRotate: 270,
          nameGap: 45,
          nameLocation: "middle",
           nameTextStyle: {
            fontStyle:{
              fontSize:12
            }
          },
          axisLine: {
            lineStyle: {
              type: "solid",
              color: "eee", //左边线的颜色
              width: "2" //坐标线的宽度
            }
          },
          axisLabel: {
            textStyle: {}
          }
        },
        series: [
          {
            name: "故障率",
            type: "line",
            label: {},
            data: []
          }
        ]
      },
      option2: {
         color:['#2F6A92'],
        title: {
          text: "",
          x: "left",
          textStyle: {
            fontWeight: "normal",
            fontSize: 12
          }
        },
        tooltip: {
          trigger: "axis"
          // formatter:'报警类型：{a}</br> 数量：{c}'
        },
       grid: {
          left: "5%",
          right: "12%",
          bottom: "15%",
          top: "12%",
          containLabel: true
        },
        xAxis: {
          type: "category",
          boundaryGap: false,
          name: "日期",
          // splitLine: { show: false },
          data: [],
          axisLine: {
            lineStyle: {
              type: "solid",
              color: "eee", //坐标线的颜色
              width: "2" //坐标线的宽度
            }
          },
          axisLabel: {
            textStyle: {}
          }
        },
        yAxis: {
          type: "value",
          // name: "故障停梯率",
          nameRotate: 270,
          nameLocation: "middle",
          nameGap: 45,
          nameTextStyle: {
            fontStyle:{
              fontSize:12
            }
          },
          axisLine: {
            lineStyle: {
              type: "solid",
              color: "eee", //左边线的颜色
              width: "2" //坐标线的宽度
            }
          },
          axisLabel: {
            textStyle: {}
          }
        },
        series: [
          {
            name: "故障率",
            type: "line",
            label: {},
            data: []
          }
        ]
      }
    };
  },
  created(){
     this.getchartData();
      this.getTopthreeData();
  }, 
  mounted() {
    this.containerHeight = document.documentElement.clientHeight - 180;
    this.width = document.documentElement.clientWidth - 250 + "px";
    this.height = document.documentElement.clientHeight - 280 + "px";
    console.log("documentheight", document.documentElement.clientHeight);
    window.addEventListener('resize',()=>{
        this.containerHeight = document.documentElement.clientHeight - 180;
        this.width = document.documentElement.clientWidth - 250 + "px";
        this.height = document.documentElement.clientHeight - 280 + "px";
        this.$nextTick(() => {
        this.chart0.resize();
        this.chart1.resize();
        this.chart2.resize();
        this.totalChart.resize();
      });
   })
  },
  methods: {
    getchartData() {
      // this.loading = true;
      this.$http({
        url: this.$http.adornUrl("/statistics/statistics/failureStopRate"),
        method: "get",
        params: this.$http.adornParams({
          years: this.formData.years,
          months: this.formData.months,
          regCode: this.formData.regCode,
          province: this.formData.province,
          city: this.formData.city,
          district: this.formData.district,
          startTime:this.formData.startTime
        })
      })
        .then(({ data }) => {
          // this.loading = false;
          console.log("总图表数据", data);
          let list = data.list;
          if (list) {
            let [xData, sData] = [[], []];
            list.forEach(item => {
              xData.push(item.date);
              let rate = item.failureStopRate;
              if (String(rate).length >= 4) {
                rate = rate.toFixed(4);
              }
              sData.push(rate);
            });
            this.totalOption.xAxis.data = xData;
            this.totalOption.series[0].data = sData;
            this.$nextTick(() => {
              this.totalChart = echart.init(
                document.getElementById("totalChartBox"),
                // "light"
              );
              this.totalChart.setOption(this.totalOption);
            });
            window.addEventListener('resize',()=>{
              this.totalChart.resize()
            })
          }
        })
        .catch(e => {
          // this.loading = false;

          console.log(e);
        });
    },
    getTopthreeData() {
      this.loading = true;
      this.$http({
        url: this.$http.adornUrl("/statistics/statistics/failureStopRatethree"),
        method: "get",
        params: this.$http.adornParams({
          years: this.formData.years,
          months: this.formData.months,
          regCode: this.formData.regCode,
          province: this.formData.province,
          city: this.formData.city,
          district: this.formData.district,
          startTime:this.formData.startTime
        })
      })
        .then(({ data }) => {
          this.loading = false;
          console.log("前三数据", data);
          let list = data.list;
          this.chartDataList = list;
          if (list) {
             let allsData = [];
            list.forEach((item, index) => {
              let [xData, sData] = [[], []];
              item.result.forEach(value => {
                xData.push(value.date);
                let rate = value.failureStopRate;
                if (String(rate).length >= 4) {
                  rate =Number(rate.toFixed(4));
                }
                sData.push(rate);
                allsData.push(rate)
              });
              this[`option${index}`].xAxis.data = xData;
              this[`option${index}`].series[0].data = sData;
              this.$nextTick(() => {
                this[`chart${index}`] = echart.init(
                  document.getElementById(`chartBox${index}`),
                  // "light"
                );
                this[`chart${index}`].setOption(this[`option${index}`]);
              });
            });
             window.addEventListener('resize',()=>{
              this.chart0.resize()
              this.chart1.resize()
              this.chart2.resize()
            })
            this.option0.yAxis.max = Math.max(...allsData);
            this.option1.yAxis.max = Math.max(...allsData);
            this.option2.yAxis.max = Math.max(...allsData);
          }
        })
        .catch(e => {
          this.loading = false;

          console.log(e);
        });
    },
    getDataList() {
      this.loading = true;
      this.$http({
        url: this.$http.adornUrl("/statistics/statistics/failureStopRateAll"),
        method: "get",
        params: this.$http.adornParams({
          page: this.pageIndex,
          limit: this.pageSize,
          years: this.formData.years,
          months: this.formData.months,
          regCode: this.formData.regCode,
          province: this.formData.province,
          city: this.formData.city,
          district: this.formData.district
        })
      })
        .then(({ data }) => {
          this.loading = false;
          console.log("表格数据", data);
          this.dataList = data.list.list;
          this.totalCount = data.list.totalCount;
        })
        .catch(e => {
          this.loading = false;
          console.log(e);
        });
    },
    handleChange(e) {
      console.log("change", e);
      this.currentIndex = e.index;
      if (e.index == 0) {
        this.getchartData();
        this.getTopthreeData();
      } else {
        this.getDataList();
      }
    },
    handleQuery() {
      console.log("formData", this.formData);
      if (this.currentIndex == 1) {
        this.pageIndex = 1;
        this.getDataList();
      } else {
        this.getchartData();
        this.getTopthreeData();
      }
    },
    formatpoint(row, col, cellvalue) {
      if (String(cellvalue).length >= 4) {
        return cellvalue.toFixed(4);
      } else {
        return cellvalue;
      }
    },
    pickStimeEtime(t) {
      console.log("282", t);
      if (t) {
        this.formData.stime = t[0];
        this.formData.etime = t[1];
      } else {
        this.formData.stime = "";
        this.formData.etime = "";
      }
    }, // 选择电梯
    selectElevator() {
      this.showElevatorselectDialog = true;
      this.$nextTick(() => {
        this.$refs.elevatorSelector.init();
      });
    },
    selectElevatorConfirm(val) {
      console.log("确认选择", val);
      this.formData.regCode = val.regcode;
      console.log(this.formData);
    }
  }
};
</script>
<style scoped lang="scss">
@import "../../../assets/css/statistical.scss";

</style>